
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000554  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800144  00800144  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ce  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ba  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000939  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000986  00000000  00000000  0000363e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_data>:
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 11e:	08 95       	ret

00000120 <lcd_gotoxy>:
 120:	61 11       	cpse	r22, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <lcd_gotoxy+0xc>
 124:	80 58       	subi	r24, 0x80	; 128
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret
 12c:	80 54       	subi	r24, 0x40	; 64
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_clrscr>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 13a:	08 95       	ret

0000013c <lcd_putc>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 142:	08 95       	ret

00000144 <lcd_puts>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	29 f0       	breq	.+10     	; 0x15e <lcd_puts+0x1a>
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fb cf       	rjmp	.-10     	; 0x154 <lcd_puts+0x10>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 168:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16a:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 16c:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 16e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 170:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 172:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 174:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x16>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init+0x1c>
 180:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 182:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 184:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x2a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x30>
 194:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19a:	95 e1       	ldi	r25, 0x15	; 21
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x38>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x44>
 1ac:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ae:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b4:	95 e1       	ldi	r25, 0x15	; 21
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x52>
 1ba:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_init>
	
	// Char1
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1e2:	80 e4       	ldi	r24, 0x40	; 64
 1e4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d1 e0       	ldi	r29, 0x01	; 1
 1ec:	00 e3       	ldi	r16, 0x30	; 48
 1ee:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 8*6; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 1f0:	89 91       	ld	r24, Y+
 1f2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
	
	// Char1
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8*6; i++)
 1f6:	c0 17       	cp	r28, r16
 1f8:	d1 07       	cpc	r29, r17
 1fa:	d1 f7       	brne	.-12     	; 0x1f0 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_puts("LCD Test");
    lcd_putc('!');
	lcd_clrscr()
	*/
	
	lcd_gotoxy(1, 0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_puts("00:00.0");
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
	
	lcd_gotoxy(11, 0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8b e0       	ldi	r24, 0x0B	; 11
 216:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('a');
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	
	lcd_gotoxy(1, 1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('b');
 228:	82 e6       	ldi	r24, 0x62	; 98
 22a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	
	lcd_gotoxy(11, 1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8b e0       	ldi	r24, 0x0B	; 11
 232:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('c');
 236:	83 e6       	ldi	r24, 0x63	; 99
 238:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16384us();
 23c:	e1 eb       	ldi	r30, 0xB1	; 177
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	87 60       	ori	r24, 0x07	; 7
 244:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 246:	e0 e7       	ldi	r30, 0x70	; 112
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
	
	TIM0_overflow_16384us();
 250:	85 b5       	in	r24, 0x25	; 37
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	85 bd       	out	0x25, r24	; 37
 256:	85 b5       	in	r24, 0x25	; 37
 258:	85 60       	ori	r24, 0x05	; 5
 25a:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 25c:	ee e6       	ldi	r30, 0x6E	; 110
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 266:	78 94       	sei
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0x8c>

0000026a <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	00 d0       	rcall	.+0      	; 0x292 <__vector_9+0x28>
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	static uint8_t min = 0;        // minits
	static uint8_t decmin = 0;        // decimal minits
	static uint16_t suma = 0;
	
	
    char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	90 e2       	ldi	r25, 0x20	; 32
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01

    number_of_overflows++;
 29e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <number_of_overflows.1951>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2a4:	86 30       	cpi	r24, 0x06	; 6
 2a6:	18 f4       	brcc	.+6      	; 0x2ae <__vector_9+0x44>
	static uint16_t suma = 0;
	
	
    char lcd_string[2] = "  ";      // String for converting numbers by itoa()

    number_of_overflows++;
 2a8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <number_of_overflows.1951>
 2ac:	c0 c0       	rjmp	.+384    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2ae:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <number_of_overflows.1951>

        // WRITE YOUR CODE HERE
		tens++;
 2b2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <tens.1952>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
		if(tens > 9)
 2b8:	8a 30       	cpi	r24, 0x0A	; 10
 2ba:	18 f4       	brcc	.+6      	; 0x2c2 <__vector_9+0x58>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;

        // WRITE YOUR CODE HERE
		tens++;
 2bc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <tens.1952>
 2c0:	a5 c0       	rjmp	.+330    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		if(tens > 9)
		{
			tens = 0;
 2c2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <tens.1952>
			secs++;
 2c6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <secs.1953>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
			if(secs > 9)
 2cc:	8a 30       	cpi	r24, 0x0A	; 10
 2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_9+0x6c>
        // WRITE YOUR CODE HERE
		tens++;
		if(tens > 9)
		{
			tens = 0;
			secs++;
 2d0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <secs.1953>
 2d4:	63 c0       	rjmp	.+198    	; 0x39c <__vector_9+0x132>
			if(secs > 9)
			{
				secs = 0;
 2d6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <secs.1953>
				decsecs++;
 2da:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <decsecs.1954>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <decsecs.1954>
				if(decsecs > 5)
 2e4:	86 30       	cpi	r24, 0x06	; 6
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <__vector_9+0x80>
 2e8:	48 c0       	rjmp	.+144    	; 0x37a <__vector_9+0x110>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2ea:	4a e0       	ldi	r20, 0x0A	; 10
 2ec:	be 01       	movw	r22, r28
 2ee:	6f 5f       	subi	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
				{	
					
					suma= 0 ;
					itoa(suma, lcd_string, 10);
					lcd_gotoxy(11,0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	8b e0       	ldi	r24, 0x0B	; 11
 2fe:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
					lcd_puts("    ");
 302:	8e e3       	ldi	r24, 0x3E	; 62
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
					
					decsecs=0;
 30a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <decsecs.1954>
					min++;
 30e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <min.1955>
 312:	8f 5f       	subi	r24, 0xFF	; 255
					if(min>9)
 314:	8a 30       	cpi	r24, 0x0A	; 10
 316:	18 f4       	brcc	.+6      	; 0x31e <__vector_9+0xb4>
					itoa(suma, lcd_string, 10);
					lcd_gotoxy(11,0);
					lcd_puts("    ");
					
					decsecs=0;
					min++;
 318:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <min.1955>
 31c:	1d c0       	rjmp	.+58     	; 0x358 <__vector_9+0xee>
					if(min>9)
					{
						min=0;
 31e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <min.1955>
						decmin++;
 322:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <decmin.1956>
 326:	8f 5f       	subi	r24, 0xFF	; 255
						if(decmin>5)
 328:	86 30       	cpi	r24, 0x06	; 6
 32a:	18 f4       	brcc	.+6      	; 0x332 <__vector_9+0xc8>
					decsecs=0;
					min++;
					if(min>9)
					{
						min=0;
						decmin++;
 32c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <decmin.1956>
 330:	02 c0       	rjmp	.+4      	; 0x336 <__vector_9+0xcc>
						if(decmin>5)
						{
							decmin=0;
 332:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <decmin.1956>
 336:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <decmin.1956>
 33a:	4a e0       	ldi	r20, 0x0A	; 10
 33c:	be 01       	movw	r22, r28
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
						}
						itoa(decmin, lcd_string, 10);
						lcd_gotoxy(1,0);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
						lcd_puts(lcd_string);
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 358:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <min.1955>
 35c:	4a e0       	ldi	r20, 0x0A	; 10
 35e:	be 01       	movw	r22, r28
 360:	6f 5f       	subi	r22, 0xFF	; 255
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
					}
					itoa(min, lcd_string, 10);
					lcd_gotoxy(2,0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
					lcd_puts(lcd_string);
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 37a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <decsecs.1954>
 37e:	4a e0       	ldi	r20, 0x0A	; 10
 380:	be 01       	movw	r22, r28
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
				}
				itoa(decsecs, lcd_string, 10);
				lcd_gotoxy(4,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
				lcd_puts(lcd_string);
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 39c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <secs.1953>
 3a0:	4a e0       	ldi	r20, 0x0A	; 10
 3a2:	be 01       	movw	r22, r28
 3a4:	6f 5f       	subi	r22, 0xFF	; 255
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
				
				
			}
			itoa(secs, lcd_string, 10);
			lcd_gotoxy(5,0);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_puts(lcd_string);
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
			
			suma= (10*decsecs+secs)*(10*decsecs+secs);    // suma == a ; a= seconds^2
 3be:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <decsecs.1954>
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	c9 01       	movw	r24, r18
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	82 0f       	add	r24, r18
 3d8:	93 1f       	adc	r25, r19
 3da:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <secs.1953>
 3de:	82 0f       	add	r24, r18
 3e0:	91 1d       	adc	r25, r1
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	9c 01       	movw	r18, r24
 3ec:	22 9f       	mul	r18, r18
 3ee:	c0 01       	movw	r24, r0
 3f0:	23 9f       	mul	r18, r19
 3f2:	90 0d       	add	r25, r0
 3f4:	90 0d       	add	r25, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
			itoa(suma, lcd_string, 10);
			lcd_gotoxy(11,0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	8b e0       	ldi	r24, 0x0B	; 11
 400:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_puts(lcd_string);
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 40c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <tens.1952>
 410:	4a e0       	ldi	r20, 0x0A	; 10
 412:	be 01       	movw	r22, r28
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__itoa_ncheck>
			
		}
		
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7,0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	87 e0       	ldi	r24, 0x07	; 7
 422:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		lcd_puts(lcd_string);
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>

    }
}
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_16>:


ISR(TIMER0_OVF_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31

	static uint8_t mysymbols = 0;
	static uint8_t position = 0;
		
		
	mysymbols++;
 47a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <mysymbols.1964>
 47e:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(mysymbols > 5)
 480:	86 30       	cpi	r24, 0x06	; 6
 482:	18 f4       	brcc	.+6      	; 0x48a <__vector_16+0x32>

	static uint8_t mysymbols = 0;
	static uint8_t position = 0;
		
		
	mysymbols++;
 484:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <mysymbols.1964>
 488:	14 c0       	rjmp	.+40     	; 0x4b2 <__vector_16+0x5a>
	
	if(mysymbols > 5)
	{
		mysymbols = 0;
 48a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <mysymbols.1964>
		position++;
 48e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 492:	8f 5f       	subi	r24, 0xFF	; 255
		if(position > 10)
 494:	8b 30       	cpi	r24, 0x0B	; 11
 496:	18 f4       	brcc	.+6      	; 0x49e <__vector_16+0x46>
	mysymbols++;
	
	if(mysymbols > 5)
	{
		mysymbols = 0;
		position++;
 498:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 49c:	0a c0       	rjmp	.+20     	; 0x4b2 <__vector_16+0x5a>
		if(position > 10)
		{
			position=1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
			lcd_gotoxy(1,1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_puts("          ");
 4aa:	88 e3       	ldi	r24, 0x38	; 56
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		}
	}
	lcd_gotoxy(position,1);
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 4b8:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc(mysymbols);
 4bc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <mysymbols.1964>
 4c0:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	
	
	
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__itoa_ncheck>:
 4e6:	bb 27       	eor	r27, r27
 4e8:	4a 30       	cpi	r20, 0x0A	; 10
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <__itoa_ncheck+0x12>
 4ec:	99 23       	and	r25, r25
 4ee:	22 f4       	brpl	.+8      	; 0x4f8 <__itoa_ncheck+0x12>
 4f0:	bd e2       	ldi	r27, 0x2D	; 45
 4f2:	90 95       	com	r25
 4f4:	81 95       	neg	r24
 4f6:	9f 4f       	sbci	r25, 0xFF	; 255
 4f8:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__utoa_common>

000004fc <__utoa_ncheck>:
 4fc:	bb 27       	eor	r27, r27

000004fe <__utoa_common>:
 4fe:	fb 01       	movw	r30, r22
 500:	55 27       	eor	r21, r21
 502:	aa 27       	eor	r26, r26
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	aa 1f       	adc	r26, r26
 50a:	a4 17       	cp	r26, r20
 50c:	10 f0       	brcs	.+4      	; 0x512 <__utoa_common+0x14>
 50e:	a4 1b       	sub	r26, r20
 510:	83 95       	inc	r24
 512:	50 51       	subi	r21, 0x10	; 16
 514:	b9 f7       	brne	.-18     	; 0x504 <__utoa_common+0x6>
 516:	a0 5d       	subi	r26, 0xD0	; 208
 518:	aa 33       	cpi	r26, 0x3A	; 58
 51a:	08 f0       	brcs	.+2      	; 0x51e <__utoa_common+0x20>
 51c:	a9 5d       	subi	r26, 0xD9	; 217
 51e:	a1 93       	st	Z+, r26
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	79 f7       	brne	.-34     	; 0x502 <__utoa_common+0x4>
 524:	b1 11       	cpse	r27, r1
 526:	b1 93       	st	Z+, r27
 528:	11 92       	st	Z+, r1
 52a:	cb 01       	movw	r24, r22
 52c:	0c 94 98 02 	jmp	0x530	; 0x530 <strrev>

00000530 <strrev>:
 530:	dc 01       	movw	r26, r24
 532:	fc 01       	movw	r30, r24
 534:	67 2f       	mov	r22, r23
 536:	71 91       	ld	r23, Z+
 538:	77 23       	and	r23, r23
 53a:	e1 f7       	brne	.-8      	; 0x534 <strrev+0x4>
 53c:	32 97       	sbiw	r30, 0x02	; 2
 53e:	04 c0       	rjmp	.+8      	; 0x548 <strrev+0x18>
 540:	7c 91       	ld	r23, X
 542:	6d 93       	st	X+, r22
 544:	70 83       	st	Z, r23
 546:	62 91       	ld	r22, -Z
 548:	ae 17       	cp	r26, r30
 54a:	bf 07       	cpc	r27, r31
 54c:	c8 f3       	brcs	.-14     	; 0x540 <strrev+0x10>
 54e:	08 95       	ret

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
