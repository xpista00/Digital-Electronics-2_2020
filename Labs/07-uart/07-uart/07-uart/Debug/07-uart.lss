
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000648  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800150  00800150  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001786  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab2  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2a  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad9  00000000  00000000  00003e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_18>
  4c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 39       	cpi	r26, 0x95	; 149
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
    lcd_gotoxy(1, 0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
    lcd_puts("value:");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(3, 1);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
    lcd_puts("key:");
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	
	ADMUX |= (1 << REFS0);
 1fa:	ec e7       	ldi	r30, 0x7C	; 124
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 64       	ori	r24, 0x40	; 64
 202:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 204:	80 81       	ld	r24, Z
 206:	8f 77       	andi	r24, 0x7F	; 127
 208:	80 83       	st	Z, r24
	
	
	
	
    // Set input channet to ADC0
	ADMUX &= ~(1 << MUX3);
 20a:	80 81       	ld	r24, Z
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2);
 210:	80 81       	ld	r24, Z
 212:	8b 7f       	andi	r24, 0xFB	; 251
 214:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1);
 216:	80 81       	ld	r24, Z
 218:	8d 7f       	andi	r24, 0xFD	; 253
 21a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0);
 21c:	80 81       	ld	r24, Z
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 83       	st	Z, r24
	

    // Enable ADC module
	
	ADCSRA |= (1 << ADEN);
 222:	ea e7       	ldi	r30, 0x7A	; 122
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
	
	ADCSRA |= (1 << ADIE);
 22c:	80 81       	ld	r24, Z
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	80 83       	st	Z, r24

    // Set clock prescaler to 128
	
	ADCSRA |= (1 << ADPS2);
 232:	80 81       	ld	r24, Z
 234:	84 60       	ori	r24, 0x04	; 4
 236:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);
 23e:	80 81       	ld	r24, Z
 240:	81 60       	ori	r24, 0x01	; 1
 242:	80 83       	st	Z, r24
	
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	
	
	TIM1_overflow_262ms();
 244:	e1 e8       	ldi	r30, 0x81	; 129
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	80 83       	st	Z, r24
 24e:	80 81       	ld	r24, Z
 250:	83 60       	ori	r24, 0x03	; 3
 252:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable() ;
 254:	ef e6       	ldi	r30, 0x6F	; 111
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 25e:	87 e6       	ldi	r24, 0x67	; 103
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 b0 02 	call	0x560	; 0x560 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 266:	78 94       	sei
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0x94>

0000026a <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 27a:	ea e7       	ldi	r30, 0x7A	; 122
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 64       	ori	r24, 0x40	; 64
 282:	80 83       	st	Z, r24

}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_21>:
/**
 * ISR starts when ADC complets the convertion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	25 97       	sbiw	r28, 0x05	; 5
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	cd bf       	out	0x3d, r28	; 61
	
    // WRITE YOUR CODE HERE
	uint16_t value;
	char lcd_string[5];
	value=ADC;
 2c8:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2cc:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2d0:	4a e0       	ldi	r20, 0x0A	; 10
 2d2:	be 01       	movw	r22, r28
 2d4:	6f 5f       	subi	r22, 0xFF	; 255
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
 2d8:	c8 01       	movw	r24, r16
 2da:	0e 94 ed 02 	call	0x5da	; 0x5da <__itoa_ncheck>
	
	// print on LCD in  decimal
	
	itoa(value,lcd_string,10);
	lcd_gotoxy(8,0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	88 e0       	ldi	r24, 0x08	; 8
 2e2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 2e6:	8c e2       	ldi	r24, 0x2C	; 44
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(8,0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	88 e0       	ldi	r24, 0x08	; 8
 2f2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 2f6:	ce 01       	movw	r24, r28
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	// parity bit (even parity)
	
	
	if(value %2 == 0)
 2fe:	00 fd       	sbrc	r16, 0
 300:	09 c0       	rjmp	.+18     	; 0x314 <__vector_21+0x80>
	{
		lcd_gotoxy(15,1);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("0");
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 312:	08 c0       	rjmp	.+16     	; 0x324 <__vector_21+0x90>
	}
	else
	{
		lcd_gotoxy(15,1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("1");
 31c:	8e e0       	ldi	r24, 0x0E	; 14
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	}
		
	if(value < 700)
 324:	0c 3b       	cpi	r16, 0xBC	; 188
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	18 07       	cpc	r17, r24
 32a:	60 f4       	brcc	.+24     	; 0x344 <__vector_21+0xb0>
	{
		// Sent to uart in decimal
		uart_puts("ADC value in decimal: ");
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 de 02 	call	0x5bc	; 0x5bc <uart_puts>
		uart_puts(lcd_string);
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	0e 94 de 02 	call	0x5bc	; 0x5bc <uart_puts>
		
		uart_puts("\n\r");
 33c:	87 e2       	ldi	r24, 0x27	; 39
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 de 02 	call	0x5bc	; 0x5bc <uart_puts>
 344:	40 e1       	ldi	r20, 0x10	; 16
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	c8 01       	movw	r24, r16
 34e:	0e 94 ed 02 	call	0x5da	; 0x5da <__itoa_ncheck>
	}
	
	// Print on LCD in hex
	
	itoa(value,lcd_string,16);
	lcd_gotoxy(13,0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 35a:	8c e2       	ldi	r24, 0x2C	; 44
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(13,0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	8d e0       	ldi	r24, 0x0D	; 13
 366:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		
	
	// print presed key
	lcd_gotoxy(8,1);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 37a:	8c e2       	ldi	r24, 0x2C	; 44
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	// print which buttun is presed
	if(value >=1016)
 382:	08 3f       	cpi	r16, 0xF8	; 248
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	18 07       	cpc	r17, r24
 388:	88 f0       	brcs	.+34     	; 0x3ac <__vector_21+0x118>
	{
		lcd_gotoxy(8,1);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	88 e0       	ldi	r24, 0x08	; 8
 38e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("      ");
 392:	8a e2       	ldi	r24, 0x2A	; 42
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8,1);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	88 e0       	ldi	r24, 0x08	; 8
 39e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("None");
 3a2:	81 e3       	ldi	r24, 0x31	; 49
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 3aa:	68 c0       	rjmp	.+208    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	}
	else if (value > 640 && value < 660 )
 3ac:	c8 01       	movw	r24, r16
 3ae:	81 58       	subi	r24, 0x81	; 129
 3b0:	92 40       	sbci	r25, 0x02	; 2
 3b2:	43 97       	sbiw	r24, 0x13	; 19
 3b4:	88 f4       	brcc	.+34     	; 0x3d8 <__vector_21+0x144>
	{
		lcd_gotoxy(8,1);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("      ");
 3be:	8a e2       	ldi	r24, 0x2A	; 42
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8,1);
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	88 e0       	ldi	r24, 0x08	; 8
 3ca:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Select");
 3ce:	86 e3       	ldi	r24, 0x36	; 54
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 3d6:	52 c0       	rjmp	.+164    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	}
	else if (value > 390 && value < 410 )
 3d8:	c8 01       	movw	r24, r16
 3da:	87 58       	subi	r24, 0x87	; 135
 3dc:	91 40       	sbci	r25, 0x01	; 1
 3de:	43 97       	sbiw	r24, 0x13	; 19
 3e0:	88 f4       	brcc	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		lcd_gotoxy(8,1);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	88 e0       	ldi	r24, 0x08	; 8
 3e6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("      ");
 3ea:	8a e2       	ldi	r24, 0x2A	; 42
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8,1);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	88 e0       	ldi	r24, 0x08	; 8
 3f6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Left");
 3fa:	8d e3       	ldi	r24, 0x3D	; 61
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 402:	3c c0       	rjmp	.+120    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	}
	else if (value > 230 && value < 260 )
 404:	c8 01       	movw	r24, r16
 406:	87 5e       	subi	r24, 0xE7	; 231
 408:	91 09       	sbc	r25, r1
 40a:	4d 97       	sbiw	r24, 0x1d	; 29
 40c:	88 f4       	brcc	.+34     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		lcd_gotoxy(8,1);
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("      ");
 416:	8a e2       	ldi	r24, 0x2A	; 42
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8,1);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	88 e0       	ldi	r24, 0x08	; 8
 422:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Down");
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 42e:	26 c0       	rjmp	.+76     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	}
	else if (value > 90 && value < 110 )
 430:	0b 55       	subi	r16, 0x5B	; 91
 432:	11 09       	sbc	r17, r1
 434:	03 31       	cpi	r16, 0x13	; 19
 436:	11 05       	cpc	r17, r1
 438:	88 f4       	brcc	.+34     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	{
		lcd_gotoxy(8,1);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("      ");
 442:	8a e2       	ldi	r24, 0x2A	; 42
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8,1);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	88 e0       	ldi	r24, 0x08	; 8
 44e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Up");
 452:	87 e4       	ldi	r24, 0x47	; 71
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 45a:	10 c0       	rjmp	.+32     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	}
	else
	{
		lcd_gotoxy(8,1);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	88 e0       	ldi	r24, 0x08	; 8
 460:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("      ");
 464:	8a e2       	ldi	r24, 0x2A	; 42
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8,1);
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	88 e0       	ldi	r24, 0x08	; 8
 470:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Right");
 474:	8a e4       	ldi	r24, 0x4A	; 74
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	}
	
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
 4c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4c8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4cc:	8c 71       	andi	r24, 0x1C	; 28
 4ce:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <UART_RxHead>
 4d2:	ef 5f       	subi	r30, 0xFF	; 255
 4d4:	ef 71       	andi	r30, 0x1F	; 31
 4d6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_RxTail>
 4da:	e9 17       	cp	r30, r25
 4dc:	39 f0       	breq	.+14     	; 0x4ec <__vector_18+0x3c>
 4de:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <UART_RxHead>
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	eb 5a       	subi	r30, 0xAB	; 171
 4e6:	fe 4f       	sbci	r31, 0xFE	; 254
 4e8:	20 83       	st	Z, r18
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <__vector_18+0x3e>
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
 4f2:	89 2b       	or	r24, r25
 4f4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_19>:
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31
 51e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_TxHead>
 522:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <UART_TxTail>
 526:	98 17       	cp	r25, r24
 528:	69 f0       	breq	.+26     	; 0x544 <__vector_19+0x38>
 52a:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <UART_TxTail>
 52e:	ef 5f       	subi	r30, 0xFF	; 255
 530:	ef 71       	andi	r30, 0x1F	; 31
 532:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <UART_TxTail>
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	eb 58       	subi	r30, 0x8B	; 139
 53a:	fe 4f       	sbci	r31, 0xFE	; 254
 53c:	80 81       	ld	r24, Z
 53e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 542:	05 c0       	rjmp	.+10     	; 0x54e <__vector_19+0x42>
 544:	e1 ec       	ldi	r30, 0xC1	; 193
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	8f 7d       	andi	r24, 0xDF	; 223
 54c:	80 83       	st	Z, r24
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <uart_init>:
 560:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <UART_TxHead>
 564:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <UART_TxTail>
 568:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <UART_RxHead>
 56c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <UART_RxTail>
 570:	99 23       	and	r25, r25
 572:	1c f4       	brge	.+6      	; 0x57a <uart_init+0x1a>
 574:	22 e0       	ldi	r18, 0x02	; 2
 576:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 57a:	90 78       	andi	r25, 0x80	; 128
 57c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 580:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 584:	88 e9       	ldi	r24, 0x98	; 152
 586:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 58a:	86 e0       	ldi	r24, 0x06	; 6
 58c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 590:	08 95       	ret

00000592 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 592:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <UART_TxHead>
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 59a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <UART_TxTail>
 59e:	29 17       	cp	r18, r25
 5a0:	e1 f3       	breq	.-8      	; 0x59a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 5a2:	e2 2f       	mov	r30, r18
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	eb 58       	subi	r30, 0x8B	; 139
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 5ac:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 5b0:	e1 ec       	ldi	r30, 0xC1	; 193
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	80 62       	ori	r24, 0x20	; 32
 5b8:	80 83       	st	Z, r24
 5ba:	08 95       	ret

000005bc <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	ec 01       	movw	r28, r24
    while (*s)
 5c2:	88 81       	ld	r24, Y
 5c4:	88 23       	and	r24, r24
 5c6:	31 f0       	breq	.+12     	; 0x5d4 <uart_puts+0x18>
 5c8:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 5ca:	0e 94 c9 02 	call	0x592	; 0x592 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 5ce:	89 91       	ld	r24, Y+
 5d0:	81 11       	cpse	r24, r1
 5d2:	fb cf       	rjmp	.-10     	; 0x5ca <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <__itoa_ncheck>:
 5da:	bb 27       	eor	r27, r27
 5dc:	4a 30       	cpi	r20, 0x0A	; 10
 5de:	31 f4       	brne	.+12     	; 0x5ec <__itoa_ncheck+0x12>
 5e0:	99 23       	and	r25, r25
 5e2:	22 f4       	brpl	.+8      	; 0x5ec <__itoa_ncheck+0x12>
 5e4:	bd e2       	ldi	r27, 0x2D	; 45
 5e6:	90 95       	com	r25
 5e8:	81 95       	neg	r24
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__utoa_common>

000005f0 <__utoa_ncheck>:
 5f0:	bb 27       	eor	r27, r27

000005f2 <__utoa_common>:
 5f2:	fb 01       	movw	r30, r22
 5f4:	55 27       	eor	r21, r21
 5f6:	aa 27       	eor	r26, r26
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	aa 1f       	adc	r26, r26
 5fe:	a4 17       	cp	r26, r20
 600:	10 f0       	brcs	.+4      	; 0x606 <__utoa_common+0x14>
 602:	a4 1b       	sub	r26, r20
 604:	83 95       	inc	r24
 606:	50 51       	subi	r21, 0x10	; 16
 608:	b9 f7       	brne	.-18     	; 0x5f8 <__utoa_common+0x6>
 60a:	a0 5d       	subi	r26, 0xD0	; 208
 60c:	aa 33       	cpi	r26, 0x3A	; 58
 60e:	08 f0       	brcs	.+2      	; 0x612 <__utoa_common+0x20>
 610:	a9 5d       	subi	r26, 0xD9	; 217
 612:	a1 93       	st	Z+, r26
 614:	00 97       	sbiw	r24, 0x00	; 0
 616:	79 f7       	brne	.-34     	; 0x5f6 <__utoa_common+0x4>
 618:	b1 11       	cpse	r27, r1
 61a:	b1 93       	st	Z+, r27
 61c:	11 92       	st	Z+, r1
 61e:	cb 01       	movw	r24, r22
 620:	0c 94 12 03 	jmp	0x624	; 0x624 <strrev>

00000624 <strrev>:
 624:	dc 01       	movw	r26, r24
 626:	fc 01       	movw	r30, r24
 628:	67 2f       	mov	r22, r23
 62a:	71 91       	ld	r23, Z+
 62c:	77 23       	and	r23, r23
 62e:	e1 f7       	brne	.-8      	; 0x628 <strrev+0x4>
 630:	32 97       	sbiw	r30, 0x02	; 2
 632:	04 c0       	rjmp	.+8      	; 0x63c <strrev+0x18>
 634:	7c 91       	ld	r23, X
 636:	6d 93       	st	X+, r22
 638:	70 83       	st	Z, r23
 63a:	62 91       	ld	r22, -Z
 63c:	ae 17       	cp	r26, r30
 63e:	bf 07       	cpc	r27, r31
 640:	c8 f3       	brcs	.-14     	; 0x634 <strrev+0x10>
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
