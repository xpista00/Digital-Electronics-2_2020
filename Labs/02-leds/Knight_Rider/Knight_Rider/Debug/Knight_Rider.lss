
Knight_Rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a4  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000334  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	unsigned int a=0;

	/* LED 0 */
    // Set pin as output in Data Direction Register...
	DDRB = DDRB | (1<<LED_RED1);
  80:	21 9a       	sbi	0x04, 1	; 4
	DDRB = DDRB | (1<<LED_RED2);
  82:	22 9a       	sbi	0x04, 2	; 4
	DDRB = DDRB | (1<<LED_RED3);
  84:	23 9a       	sbi	0x04, 3	; 4
	DDRB = DDRB | (1<<LED_RED4);
  86:	24 9a       	sbi	0x04, 4	; 4
	DDRB = DDRB | (1<<LED_RED5);
  88:	25 9a       	sbi	0x04, 5	; 4
    // ...and turn LED off in Data Register
	
	//Button
	DDRD = DDRD & ~(1<<BTN);
  8a:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
  8c:	58 9a       	sbi	0x0b, 0	; 11
	
    /* LED 1 */
    // WRITE YOUR CODE HERE	
	PORTB = PORTB & ~(1<<LED_RED1);
  8e:	29 98       	cbi	0x05, 1	; 5
	
	// LED 2
	PORTB = PORTB & ~(1<<LED_RED2);
  90:	2a 98       	cbi	0x05, 2	; 5
	
	// LED 3
	PORTB = PORTB & ~(1<<LED_RED3);
  92:	2b 98       	cbi	0x05, 3	; 5
		
	// LED 4
	PORTB = PORTB & ~(1<<LED_RED4);
  94:	2c 98       	cbi	0x05, 4	; 5
	
	// LED 5
	PORTB = PORTB & ~(1<<LED_RED5);
  96:	2d 98       	cbi	0x05, 5	; 5
 * Main function where the program execution begins. Toggle two LEDs 
 * when a push button is pressed.
 */
int main(void)
{
	unsigned int a=0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 off
			a=a+1;
		}
		else if (bit_is_clear(PIND,BTN) && a==7 )
		{
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 on
  9c:	34 e0       	ldi	r19, 0x04	; 4
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 off
			a=0;
  9e:	91 2c       	mov	r9, r1
  a0:	a1 2c       	mov	r10, r1
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 off
			a=a+1;
		}
		else if (bit_is_clear(PIND,BTN) && a==6 )
		{
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 on
  a2:	48 e0       	ldi	r20, 0x08	; 8
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 off
			a=a+1;
  a4:	0f 2e       	mov	r0, r31
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	bf 2e       	mov	r11, r31
  aa:	f0 2d       	mov	r31, r0
  ac:	c1 2c       	mov	r12, r1
			PORTB = PORTB ^ (1<<LED_RED5);	// LED 5 off
			a=a+1;
		}
		else if (bit_is_clear(PIND,BTN) && a==5 )
		{
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 on
  ae:	50 e1       	ldi	r21, 0x10	; 16
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 off
			a=a+1;
  b0:	0f 2e       	mov	r0, r31
  b2:	f6 e0       	ldi	r31, 0x06	; 6
  b4:	df 2e       	mov	r13, r31
  b6:	f0 2d       	mov	r31, r0
  b8:	e1 2c       	mov	r14, r1
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 off
			a=a+1;
		}
		else if (bit_is_clear(PIND,BTN) && a==4 )
		{								
			PORTB = PORTB ^ (1<<LED_RED5);	// LED 5 on
  ba:	e0 e2       	ldi	r30, 0x20	; 32
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED5);	// LED 5 off
			a=a+1;
  bc:	0f 2e       	mov	r0, r31
  be:	f5 e0       	ldi	r31, 0x05	; 5
  c0:	ff 2e       	mov	r15, r31
  c2:	f0 2d       	mov	r31, r0
  c4:	81 2c       	mov	r8, r1
		else if (bit_is_clear(PIND,BTN) && a==3 )
		{
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 on
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 off
			a=a+1;
  c6:	14 e0       	ldi	r17, 0x04	; 4
  c8:	d0 e0       	ldi	r29, 0x00	; 0
		else if (bit_is_clear(PIND,BTN) && a==2 )
		{
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 on
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 off
			a=a+1;
  ca:	c3 e0       	ldi	r28, 0x03	; 3
  cc:	b0 e0       	ldi	r27, 0x00	; 0
		else if (bit_is_clear(PIND,BTN) && a==1 )
		{			
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 on
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 off
			a=a+1;
  ce:	a2 e0       	ldi	r26, 0x02	; 2
  d0:	f0 e0       	ldi	r31, 0x00	; 0
		
		
		if (bit_is_clear(PIND,BTN) && a==0 )
		{
				
			PORTB = PORTB ^ (1<<LED_RED1);	// LED 1 on 
  d2:	22 e0       	ldi	r18, 0x02	; 2
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED1);	// LED 1 off
			a=a+1;
  d4:	71 e0       	ldi	r23, 0x01	; 1
  d6:	60 e0       	ldi	r22, 0x00	; 0
		
				
		
		
		
		if (bit_is_clear(PIND,BTN) && a==0 )
  d8:	48 99       	sbic	0x09, 0	; 9
  da:	14 c0       	rjmp	.+40     	; 0x104 <main+0x84>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	91 f4       	brne	.+36     	; 0x104 <main+0x84>
		{
				
			PORTB = PORTB ^ (1<<LED_RED1);	// LED 1 on 
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	82 27       	eor	r24, r18
  e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	0f ef       	ldi	r16, 0xFF	; 255
  e8:	84 e3       	ldi	r24, 0x34	; 52
  ea:	9c e0       	ldi	r25, 0x0C	; 12
  ec:	01 50       	subi	r16, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED1);	// LED 1 off
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	82 27       	eor	r24, r18
  fc:	85 b9       	out	0x05, r24	; 5
			a=a+1;
  fe:	87 2f       	mov	r24, r23
 100:	96 2f       	mov	r25, r22
 102:	ea cf       	rjmp	.-44     	; 0xd8 <main+0x58>
		}
		
		else if (bit_is_clear(PIND,BTN) && a==1 )
 104:	48 99       	sbic	0x09, 0	; 9
 106:	15 c0       	rjmp	.+42     	; 0x132 <main+0xb2>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	91 05       	cpc	r25, r1
 10c:	91 f4       	brne	.+36     	; 0x132 <main+0xb2>
		{			
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 on
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	83 27       	eor	r24, r19
 112:	85 b9       	out	0x05, r24	; 5
 114:	0f ef       	ldi	r16, 0xFF	; 255
 116:	84 e3       	ldi	r24, 0x34	; 52
 118:	9c e0       	ldi	r25, 0x0C	; 12
 11a:	01 50       	subi	r16, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x9a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa4>
 124:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 off
 126:	85 b1       	in	r24, 0x05	; 5
 128:	83 27       	eor	r24, r19
 12a:	85 b9       	out	0x05, r24	; 5
			a=a+1;
 12c:	8a 2f       	mov	r24, r26
 12e:	9f 2f       	mov	r25, r31
 130:	d3 cf       	rjmp	.-90     	; 0xd8 <main+0x58>
			
		}
		else if (bit_is_clear(PIND,BTN) && a==2 )
 132:	48 99       	sbic	0x09, 0	; 9
 134:	15 c0       	rjmp	.+42     	; 0x160 <main+0xe0>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	91 05       	cpc	r25, r1
 13a:	91 f4       	brne	.+36     	; 0x160 <main+0xe0>
		{
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 on
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	84 27       	eor	r24, r20
 140:	85 b9       	out	0x05, r24	; 5
 142:	0f ef       	ldi	r16, 0xFF	; 255
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	9c e0       	ldi	r25, 0x0C	; 12
 148:	01 50       	subi	r16, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xc8>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xd2>
 152:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 off
 154:	85 b1       	in	r24, 0x05	; 5
 156:	84 27       	eor	r24, r20
 158:	85 b9       	out	0x05, r24	; 5
			a=a+1;
 15a:	8c 2f       	mov	r24, r28
 15c:	9b 2f       	mov	r25, r27
 15e:	bc cf       	rjmp	.-136    	; 0xd8 <main+0x58>
		}
		else if (bit_is_clear(PIND,BTN) && a==3 )
 160:	48 99       	sbic	0x09, 0	; 9
 162:	15 c0       	rjmp	.+42     	; 0x18e <main+0x10e>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	91 05       	cpc	r25, r1
 168:	91 f4       	brne	.+36     	; 0x18e <main+0x10e>
		{
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 on
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	85 27       	eor	r24, r21
 16e:	85 b9       	out	0x05, r24	; 5
 170:	0f ef       	ldi	r16, 0xFF	; 255
 172:	84 e3       	ldi	r24, 0x34	; 52
 174:	9c e0       	ldi	r25, 0x0C	; 12
 176:	01 50       	subi	r16, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xf6>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x100>
 180:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 off
 182:	85 b1       	in	r24, 0x05	; 5
 184:	85 27       	eor	r24, r21
 186:	85 b9       	out	0x05, r24	; 5
			a=a+1;
 188:	81 2f       	mov	r24, r17
 18a:	9d 2f       	mov	r25, r29
 18c:	a5 cf       	rjmp	.-182    	; 0xd8 <main+0x58>
		}
		else if (bit_is_clear(PIND,BTN) && a==4 )
 18e:	48 99       	sbic	0x09, 0	; 9
 190:	15 c0       	rjmp	.+42     	; 0x1bc <main+0x13c>
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	91 05       	cpc	r25, r1
 196:	91 f4       	brne	.+36     	; 0x1bc <main+0x13c>
		{								
			PORTB = PORTB ^ (1<<LED_RED5);	// LED 5 on
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	8e 27       	eor	r24, r30
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	0f ef       	ldi	r16, 0xFF	; 255
 1a0:	84 e3       	ldi	r24, 0x34	; 52
 1a2:	9c e0       	ldi	r25, 0x0C	; 12
 1a4:	01 50       	subi	r16, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x124>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x12e>
 1ae:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED5);	// LED 5 off
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8e 27       	eor	r24, r30
 1b4:	85 b9       	out	0x05, r24	; 5
			a=a+1;
 1b6:	8f 2d       	mov	r24, r15
 1b8:	98 2d       	mov	r25, r8
 1ba:	8e cf       	rjmp	.-228    	; 0xd8 <main+0x58>
		}
		else if (bit_is_clear(PIND,BTN) && a==5 )
 1bc:	48 99       	sbic	0x09, 0	; 9
 1be:	15 c0       	rjmp	.+42     	; 0x1ea <main+0x16a>
 1c0:	85 30       	cpi	r24, 0x05	; 5
 1c2:	91 05       	cpc	r25, r1
 1c4:	91 f4       	brne	.+36     	; 0x1ea <main+0x16a>
		{
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 on
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	85 27       	eor	r24, r21
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	0f ef       	ldi	r16, 0xFF	; 255
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	9c e0       	ldi	r25, 0x0C	; 12
 1d2:	01 50       	subi	r16, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x152>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x15c>
 1dc:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED4);	// LED 4 off
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	85 27       	eor	r24, r21
 1e2:	85 b9       	out	0x05, r24	; 5
			a=a+1;
 1e4:	8d 2d       	mov	r24, r13
 1e6:	9e 2d       	mov	r25, r14
 1e8:	77 cf       	rjmp	.-274    	; 0xd8 <main+0x58>
		}
		else if (bit_is_clear(PIND,BTN) && a==6 )
 1ea:	48 99       	sbic	0x09, 0	; 9
 1ec:	15 c0       	rjmp	.+42     	; 0x218 <main+0x198>
 1ee:	86 30       	cpi	r24, 0x06	; 6
 1f0:	91 05       	cpc	r25, r1
 1f2:	91 f4       	brne	.+36     	; 0x218 <main+0x198>
		{
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 on
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	84 27       	eor	r24, r20
 1f8:	85 b9       	out	0x05, r24	; 5
 1fa:	0f ef       	ldi	r16, 0xFF	; 255
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	9c e0       	ldi	r25, 0x0C	; 12
 200:	01 50       	subi	r16, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x180>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x18a>
 20a:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED3);	// LED 3 off
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	84 27       	eor	r24, r20
 210:	85 b9       	out	0x05, r24	; 5
			a=a+1;
 212:	8b 2d       	mov	r24, r11
 214:	9c 2d       	mov	r25, r12
 216:	60 cf       	rjmp	.-320    	; 0xd8 <main+0x58>
		}
		else if (bit_is_clear(PIND,BTN) && a==7 )
 218:	48 99       	sbic	0x09, 0	; 9
 21a:	5e cf       	rjmp	.-324    	; 0xd8 <main+0x58>
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	91 05       	cpc	r25, r1
 220:	09 f0       	breq	.+2      	; 0x224 <main+0x1a4>
 222:	5a cf       	rjmp	.-332    	; 0xd8 <main+0x58>
		{
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 on
 224:	85 b1       	in	r24, 0x05	; 5
 226:	83 27       	eor	r24, r19
 228:	85 b9       	out	0x05, r24	; 5
 22a:	0f ef       	ldi	r16, 0xFF	; 255
 22c:	84 e3       	ldi	r24, 0x34	; 52
 22e:	9c e0       	ldi	r25, 0x0C	; 12
 230:	01 50       	subi	r16, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x1b0>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x1ba>
 23a:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_RED2);	// LED 2 off
 23c:	85 b1       	in	r24, 0x05	; 5
 23e:	83 27       	eor	r24, r19
 240:	85 b9       	out	0x05, r24	; 5
			a=0;
 242:	89 2d       	mov	r24, r9
 244:	9a 2d       	mov	r25, r10
 246:	48 cf       	rjmp	.-368    	; 0xd8 <main+0x58>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
